// Generated by CoffeeScript 1.3.1
(function() {
  var date_range, find_templates, format_date, getCookie, months, null_empty_str, number_postfix, summarize, templates, time_range, time_until,
    __slice = [].slice;

  window.getCookie = getCookie = function(name, source) {
    var c, cookies, raw_name, value, _i, _len, _ref;
    if (source == null) {
      source = document.cookie;
    }
    if (source && source !== '') {
      cookies = source.split(';');
      for (_i = 0, _len = cookies.length; _i < _len; _i++) {
        c = cookies[_i];
        _ref = $.trim(c).split('=', 2), raw_name = _ref[0], value = _ref[1];
        if (raw_name === name) {
          return decodeURIComponent(value);
        }
      }
    }
    return null;
  };

  $(document).ajaxSend(function(evt, xhr, settings) {
    var safeMethod, sameOrigin;
    sameOrigin = function(url) {
      var host, origin, protocol, sr_origin;
      host = document.location.host;
      protocol = document.location.protocol;
      sr_origin = '//' + host;
      origin = protocol + sr_origin;
      return (url === origin || url.slice(0, origin.length + 1) === origin + '/') || (url === sr_origin || url.slice(0, sr_origin.length + 1) === sr_origin + '/') || !(/^(\/\/|http:|https:).*/.test(url));
    };
    safeMethod = function(method) {
      return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
    };
    if (!safeMethod(settings.type) && sameOrigin(settings.url)) {
      return xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken'));
    }
  });

  window.escapeHTML = function(data) {
    return $(document.createElement('div')).html(data).text().replace('\n', '<br/>');
  };

  (function() {
    var cache, tmpl;
    cache = {};
    return tmpl = this.tmpl = function(str, data) {
      var fn;
      fn = new Function("obj", "var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('" + str.replace(/[\r\t\n]/g, " ").split("<%").join("\t").replace(/((^|%>)[^\t]*)'/g, "$1\r").replace(/\t=(.*?)%>/g, "',$1,'").split("\t").join("');").split("%>").join("p.push('").split("\r").join("\\'") + "');}return p.join('');");
      if (data) {
        return fn(data);
      } else {
        return fn;
      }
    };
  })();

  find_templates = function(elements) {
    var results;
    results = {};
    $(elements).each(function() {
      var el;
      el = $(this);
      return results[el.attr('id')] = tmpl(el.html());
    });
    return results;
  };

  templates = {};

  $(function() {
    return window.templates = templates = find_templates('script[type="text/template"]');
  });

  summarize = function(elements, max_length) {
    if (max_length == null) {
      max_length = 220;
    }
    return $(elements).each(function() {
      var el;
      el = $(this);
      if (el.text().length > max_length + 53) {
        if (el.data('full-text') != null) {
          return;
        }
        el.data('full-text', el.text());
        el.text(el.text().substring(0, max_length) + '... ');
        el.append('<a href="#read-more" class="read-more">more</a>');
        return el.find('.read-more').click(function() {
          el.text(el.data('full-text'));
          $(window).trigger('summary-expanded', [el, el.text()]);
          return false;
        });
      }
    });
  };

  $(function() {
    return summarize('.summarize');
  });

  $(function() {
    var elements, resized;
    elements = null;
    resized = function() {
      var children, colWidth, cutoff, sx, sy, width;
      width = $(window).width();
      cutoff = 992;
      if (elements != null) {
        elements.masonry('destroy');
        elements = null;
      }
      if (width >= cutoff) {
        sx = $(window).scrollTop();
        sy = $(window).scrollLeft();
        elements = $('.events');
        children = elements.find('.event');
        colWidth = children.width() + parseInt(children.css('padding-left'), 10) + parseInt(children.css('padding-right'), 10) + parseInt(children.css('margin-left'), 10) + parseInt(children.css('margin-right'), 10) + parseInt(children.css('border-left'), 10) + parseInt(children.css('border-right'), 10);
        elements.masonry({
          itemSelector: '.event',
          columnWidth: colWidth
        });
        $(window).scrollTop(sx);
        return $(window).scrollLeft(sy);
      }
    };
    $(window).bind('resize', resized);
    return $(window).bind('summary-expanded', resized);
  });

  window.format = function() {
    var obj, string, values;
    string = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (values.length < 1) {
      return string;
    }
    if (values.length === 1 && $.type(values[0]) === 'object') {
      obj = values[0];
      return string.replace(/{{ *([a-zA-Z0-9_-]+) *}}/g, function(match, identifer) {
        if (obj[identifer] != null) {
          return obj[identifer];
        } else {
          return match;
        }
      });
    } else {
      return string.replace(/{{ *(\d+) *}}/g, function(match, index) {
        if (values[index] != null) {
          return values[index];
        } else {
          return match;
        }
      });
    }
  };

  number_postfix = function(n) {
    if (n === 1) {
      return 'st';
    } else if (n === 2) {
      return 'nd';
    } else if (n === 3) {
      return 'rd';
    } else {
      return 'th';
    }
  };

  months = ['January', 'Feburary', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'November', 'October', 'December'];

  format_date = function(str, date) {
    var hours;
    hours = date.getHours() % 12;
    if (hours === 0) {
      hours = 12;
    }
    return format(str, {
      year: date.getFullYear(),
      month: months[date.getMonth()].substring(0, 3),
      day: date.getDate(),
      day_th: number_postfix(date.getDate()),
      hour: hours,
      minute: (date.getMinutes() < 10 ? '0' : '') + date.getMinutes(),
      apm: date.getHours() < 12 ? 'am' : 'pm'
    });
  };

  date_range = function(start, end) {
    var diff, result, str;
    if (end == null) {
      end = new Date();
    }
    diff = {
      year: start.getFullYear() !== end.getFullYear(),
      month: start.getMonth() !== end.getMonth(),
      day: start.getDate() !== end.getDate()
    };
    str = [];
    if (diff.month) {
      str.push('{{ month }}');
    }
    if (diff.day) {
      str.push('{{ day }}{{ day_th }}');
    }
    if (diff.year) {
      str[str.length - 1] = str[str.length - 1] + ',';
      str.push('{{ year }}');
    }
    str = str.join(' ');
    if (str.length) {
      result = format_date(str, start) + ' - ' + format_date(str, end);
    } else {
      result = ' - ';
    }
    if (diff.day && !diff.month) {
      result = format_date('{{ month }} ', start) + result;
    }
    return result.split(' - ');
  };

  time_range = function(start, end) {
    var diff, result, str;
    if (end == null) {
      end = new Date();
    }
    diff = {
      hour: start.getHours() !== end.getHours(),
      minute: start.getMinutes() !== end.getMinutes(),
      apm: (start.getHours() <= 12) !== (end.getHours() <= 12)
    };
    str = [];
    if (diff.hour || diff.minute) {
      if (diff.minute) {
        str.push('{{ hour }}:{{ minute }}');
      } else {
        str.push('{{ hour }}');
      }
    }
    if (diff.apm) {
      str[str.length - 1] = str[str.length - 1] + '{{ apm }}';
    }
    str = str.join(' ');
    result = format_date(str, start) + ' - ' + format_date(str, end);
    if (!diff.apm) {
      result += format_date('{{ apm }}', end);
    }
    return result.split(' - ');
  };

  time_until = function(start, reference) {
    var diff, hours, minutes, s;
    if (reference == null) {
      reference = new Date();
    }
    if (start.getFullYear() !== reference.getFullYear() || start.getMonth() !== reference.getMonth() || start.getDate() !== reference.getDate()) {
      return '';
    }
    diff = (start.getHours() * 60 + start.getMinutes()) - (reference.getHours() * 60 + reference.getMinutes());
    hours = Math.floor(diff / 60);
    minutes = diff % 60;
    s = '';
    if (hours > 0) {
      s = format('{{ 0 }} hour{{ 1 }}', hours, hours === 1 ? '' : 's');
    }
    if (minutes > 0) {
      if (s !== '') {
        s += ', ';
      }
      s += format('{{ 0 }} minute{{ 1 }}', minutes, minutes === 1 ? '' : 's');
    }
    return s;
  };

  null_empty_str = function(s) {
    if (!(s != null) || $.trim(s) === '') {
      return null;
    } else {
      return s;
    }
  };

  $(function() {
    var get_events, target;
    target = $('.events');
    get_events = function(position) {
      var data;
      data = {
        num_results: 20,
        offset: 0
      };
      if (position != null) {
        $.extend(data, {
          lat: position.coords.latitude,
          lon: position.coords.longitude
        });
      }
      return $.ajax({
        url: '/api/events/',
        data: data,
        type: 'get',
        dataType: 'json',
        success: function(data) {
          var date_end, date_start, end_time, pos, results, row, start_time, time_end, time_start, timeuntil, _i, _len, _ref;
          target.empty();
          _ref = data.results;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            row = _ref[_i];
            start_time = new Date(row.start_time * 1000);
            if (row.end_time != null) {
              end_time = new Date(row.end_time * 1000);
            } else {
              end_time = null;
            }
            results = date_range(start_time, end_time);
            date_start = results[0];
            date_end = results[1];
            results = time_range(start_time, end_time);
            time_start = results[0];
            time_end = results[1];
            timeuntil = time_until(start_time);
            pos = row.location_gps.split(',');
            target.append(templates.event_template({
              h: escapeHTML,
              lat: parseFloat(pos[0]),
              lon: parseFloat(pos[1]),
              url: row.url,
              image_url: (row.pic_square != null) && $.trim(row.pic_square) !== '' ? row.pic_square : null,
              title: row.name,
              time_until: null_empty_str(timeuntil),
              start_date: null_empty_str(date_start),
              end_date: null_empty_str(date_end),
              start_time: null_empty_str(time_start),
              end_time: null_empty_str(time_end),
              location: row.location,
              description: row.description
            }));
          }
          summarize('.summarize');
          return $(window).trigger('resize');
        },
        error: function(req, stat, err) {
          console.error('no geolocation');
          return console.log(req, stat, err);
        }
      });
    };
    if (navigator.geolocation != null) {
      return navigator.geolocation.getCurrentPosition(get_events, function() {
        return get_events();
      });
    } else {
      console.error('no geolocation');
      return get_events();
    }
  });

}).call(this);
